#include "imports/stdlib.fc";
#include "imports/errors.fc";
#include "imports/op-codes.fc";
#include "imports/constants.fc";
#include "imports/params.fc";
#include "imports/messages.fc";
#include "imports/events.fc";

;; storage variables

;; id is required to be able to create different instances of counters
;; since addresses in TON depend on the initial state of the contract
global int is_used;
global int nonce;
global slice pool_address;

;; load_data populates storage variables using stored data
() load_data() impure {
    var ds = get_data().begin_parse();

    is_used = ds~load_uint(2);
    nonce = ds~load_uint(64);
    pool_address = ds~load_msg_addr();

    ds.end_parse();
}

;; save_data stores storage variables as a cell into persistent storage
() save_data() impure {
    set_data(
        begin_cell()
            .store_uint(is_used, 2)
            .store_uint(nonce, 64)
            .store_slice(pool_address)
            .end_cell()
    );
}

() on_bounce (slice in_msg_body) impure {
    in_msg_body~skip_bits(32); ;; 0xFFFFFFFF
    load_data();
    int op = in_msg_body~load_uint(32);
    throw_unless(709, (op == op::internal_withdraw()));
    int query_id = in_msg_body~load_uint(64);
    is_used = 0;
    save_data();
}

;; recv_internal is the main function of the contract and is called when it receives a message from other contracts
() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore all empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { 
        on_bounce(in_msg_body);
        return ();
    }

    load_data(); ;; here we populate the storage variables

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_f

    int op = in_msg_body~load_uint(32); ;; by convention, the first 32 bits of incoming message is the op
    int query_id = in_msg_body~load_uint(64); ;; also by convention, the next 64 bits contain the "query id", although this is not always the case

    if (op == op::check_nonce()) {
        throw_unless(error::NONCE_USED(), (is_used == 0));
        throw_unless(error::INVALID_CALLER(), equal_slices_bits(sender_address, pool_address));
        is_used = 1;
        save_data();
        cell internal_body = in_msg_body~load_ref();
        send_simple_message(fwd_fee + 4 * const::provide_address_gas_consumption(), pool_address, internal_body, NORMAL);
        return();
    }

    throw(0xffff); ;; if the message contains an op that is not known to this contract, we throw
}

;; get methods are a means to conveniently read contract data using, for example, HTTP APIs
;; they are marked with method_id
;; note that unlike in many other smart contract VMs, get methods cannot be called by other contracts

(int, int, slice) get_nonce_data() method_id {
    load_data();
    return (is_used, nonce, pool_address);
}

